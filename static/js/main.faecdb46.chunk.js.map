{"version":3,"sources":["logo.svg","theta.png","serviceWorker.js","App.js","Theta.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","App","className","src","logo","alt","href","target","rel","AlertButton","alert","ReactDOM","render","document","getElementById","theta","Fragment","class","type","name","onClick","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,qICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCWSC,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,0BAFF,UAMC,6BAND,MAMS,6BANT,OAMkB,6BANlB,4CAOE,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kB,gBCLR,SAASC,IACPC,MAAM,YCCRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjDH,IAASC,OAAO,mBDRF,kBACX,mCAAQ,6BAAR,IAAe,yBAAKT,IAAKY,IAAOb,UAAY,kBCO/B,MAAWW,SAASC,eAAe,UACnDH,IAASC,OAAO,mBDAF,kBACd,kBAAC,IAAMI,SAAP,KACA,6BADA,KAGA,6BACE,0BAAMC,MAAM,aACV,4CACY,6BACV,2BAAOC,KAAK,OAAOC,KAAK,SAE1B,6BACA,2BAAOD,KAAK,OAAOC,KAAK,QACxB,6BACA,2BAAOD,KAAK,OAAOC,KAAK,QACxB,6BACA,2BAAOD,KAAK,OAAOC,KAAK,QACxB,6BACA,2BAAOD,KAAK,OAAOC,KAAK,SAE1B,6BACA,4BAAQC,QAASX,GAAjB,gBCpBc,MAAWI,SAASC,eAAe,aHmH7C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.faecdb46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/theta.398f0c60.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.!!\n\n        </p>\nhellloo<br/>meh<br/>blah<br/>committing from windows. saved on githubb\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default App\n","import React from 'react';\nimport theta from './theta.png';\nimport './App.css'\n\n\nconst Theta = () => (\n   <p>Theta<br /> <img src={theta} className = \"Theta-logo\"/></p>\n);\n\nfunction AlertButton (){\n  alert(\"Helloooo\");\n};\n\n\nconst Forms = () => (\n<React.Fragment>\n<br />\naa\n<br />\n  <form class=\"formClass\">\n    <label>\n      Test forms<br/>\n      <input type=\"text\" name=\"aaa\" />\n    </label>\n    <br/>\n    <input type=\"text\" name=\"bbb\" />\n    <br/>\n    <input type=\"text\" name=\"bbb\" />\n    <br/>\n    <input type=\"text\" name=\"bbb\" />\n    <br/>\n    <input type=\"text\" name=\"bbb\" />\n  </form>\n  <br />\n  <button onClick={AlertButton}>Click Me!</button>\n</React.Fragment>\n\n);\n\nexport { Theta, Forms}\n//export const forms = () => {}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport {Theta, Forms} from './Theta.js';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<Theta />, document.getElementById('theta'));\nReactDOM.render(<Forms />, document.getElementById('formsDiv'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}